# E-commerce with Shopify Integration

A full-stack e-commerce application built with React and Flask, featuring Shopify API integration for enhanced functionality.

## 🚀 Features

- **User Authentication**: JWT-based registration and login
- **Product Management**: CRUD operations with admin controls
- **Shopping Cart**: Add, update, and remove items
- **Order Processing**: Complete checkout with order history
- **Shopify Integration**: Sync products and inventory
- **Admin Panel**: Manage products, orders, and users
- **Payment Processing**: Stripe integration
- **Responsive Design**: Mobile-friendly interface

## 🛠️ Tech Stack

### Backend
- **Python** - Programming language
- **Flask** - Web framework
- **SQLAlchemy** - Database ORM
- **JWT Extended** - Authentication
- **Flask-CORS** - Cross-origin requests

### Frontend
- **React** - UI framework
- **Context API** - State management
- **Shopify Polaris** - Design system

### Database
- **SQLite** - Development database
- **PostgreSQL** - Production database

## 📁 Project Structure

```
ecommerce-shopify/
├── backend/
│   ├── app/
│   │   ├── models/
│   │   │   ├── __init__.py
│   │   │   ├── cart.py
│   │   │   ├── order.py
│   │   │   ├── product.py
│   │   │   └── user.py
│   │   ├── routes/
│   │   │   ├── __init__.py
│   │   │   ├── auth.py
│   │   │   └── products.py
│   │   ├── services/
│   │   └── __init__.py
│   ├── run.py
│   └── .env
├── frontend/
├── venv/
└── README.md
```

## 🔧 Installation & Setup

### Prerequisites
- Python 3.8+
- Node.js 16+
- Git

### Backend Setup

1. **Clone the repository**
```bash
git clone [your-repo-url]
cd ecommerce-shopify
```

2. **Create virtual environment**
```bash
python -m venv venv
```

3. **Activate virtual environment**
```bash
# Windows
venv\Scripts\activate

# macOS/Linux
source venv/bin/activate
```

4. **Install dependencies**
```bash
cd backend
pip install flask flask-sqlalchemy flask-jwt-extended flask-cors python-dotenv
```

exit()

The API will be available at `http://localhost:5000`

## 📚 API Documentation

### Authentication Endpoints

| Method | Endpoint | Description |
|--------|----------|-------------|
| POST | /api/auth/register | Register new user |
| POST | /api/auth/login | Login user |
| GET | /api/auth/profile | Get user profile |
| POST | /api/auth/refresh | Refresh JWT token |

### Product Endpoints

| Method | Endpoint | Description |
|--------|----------|-------------|
| GET | /api/products/ | Get all products |
| GET | /api/products/id | Get single product |
| POST | /api/products/ | Create product (admin) |
| PUT | /api/products/id | Update product (admin) |
| DELETE | /api/products/id | Delete product (admin) |
| GET | /api/products/categories | Get all categories |

### Health Check

| Method | Endpoint | Description |
|--------|----------|-------------|
| GET | /api/health | API health status |

## 🔐 Environment Variables

```bash
SECRET_KEY=your-secret-key
JWT_SECRET_KEY=your-jwt-secret
DATABASE_URL=sqlite:///ecommerce.db
SHOPIFY_API_KEY=your-shopify-key
STRIPE_SECRET_KEY=your-stripe-key
```

## 🎯 Development Status

- [x] Backend API structure
- [x] User authentication system
- [x] Product management
- [x] Database models
- [x] Shopping cart functionality
- [x] Order processing
- [x] Shopify integration
- [x] Frontend React app
- [x] Payment processing
- [x] Admin dashboard
- [x] Production deployment

## 👨‍💻 Author

Developed as part of a portfolio project to demonstrate full-stack development skills with modern web technologies and third-party API integrations.

## 📄 License

This project is for portfolio purposes.